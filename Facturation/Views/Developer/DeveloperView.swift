import SwiftUI

struct DeveloperView: View {
    @EnvironmentObject private var dataService: DataService
    @State private var showingAlert = false
    @State private var alertMessage = ""
    @State private var showResetConfirmation = false

    @State private var isAuthenticated: Bool = false
    @AppStorage("developerUsername") private var storedUsername: String = "admin"
    @AppStorage("developerPassword") private var storedPassword: String = "420STUDIO"
    @AppStorage("isDebugMode") private var isDebugMode: Bool = false

    @State private var newUsername: String = ""
    @State private var newPassword: String = ""
    @State private var showCredentialResetConfirmation: Bool = false

    var body: some View {
        Group {
            if isAuthenticated || isDebugMode {
                VStack(spacing: 30) {
                    Text("Outils D√©veloppeur")
                        .font(.system(size: 22, weight: .bold))
                        .padding(.top, 24)

                    Text("ü§ñ")
                        .font(.system(size: 80))
                        .padding(.bottom, 10)

                    Text("Cette vue permet de g√©n√©rer des donn√©es d‚Äôentra√Ænement, r√©initialiser l‚Äôapplication, ou repartir sur une base SwiftData totalement propre. Utile pour le debug ou les tests.")
                        .font(.subheadline)
                        .foregroundColor(.gray)
                        .multilineTextAlignment(.center)
                        .padding(.bottom, 10)

                    Button("G√©n√©rer des donn√©es d‚Äôentra√Ænement") {
                        Task {
                            await dataService.generateTrainingData()
                            alertMessage = "Donn√©es d‚Äôentra√Ænement cr√©√©es"
                            showingAlert = true
                        }
                    }
                    .buttonStyle(.borderedProminent)
                    Text("Ajoute des clients, factures et produits fictifs pour tester rapidement l‚Äôapplication.")
                        .font(.caption)
                        .foregroundColor(.gray)

                    Button("R√©initialiser l‚Äôapplication") {
                        Task {
                            await dataService.clearAllData()
                            alertMessage = "Toutes les donn√©es ont √©t√© supprim√©es"
                            showingAlert = true
                        }
                    }
                    .buttonStyle(.bordered)
                    Text("Supprime toutes les donn√©es utilisateurs (clients, factures, produits) mais conserve la structure de base.")
                        .font(.caption)
                        .foregroundColor(.gray)

                    Button("R√©initialiser compl√®tement la base (resetContainer)") {
                        showResetConfirmation = true
                    }
                    .buttonStyle(.borderedProminent)
                    .tint(.red)
                    Text("D√©truit la base SwiftData, r√©initialise le contexte. √Ä utiliser apr√®s un refactoring ou une migration.")
                        .font(.caption)
                        .foregroundColor(.gray)
                    .alert("‚ö†Ô∏è Attention", isPresented: $showResetConfirmation) {
                        Button("R√©initialiser", role: .destructive) {
                            dataService.resetContainer()
                            alertMessage = "Base de donn√©es r√©initialis√©e (container reset)"
                            showingAlert = true
                        }
                        Button("Annuler", role: .cancel) {}
                    } message: {
                        Text("Cette action va SUPPRIMER TOUTES les donn√©es de l‚Äôapplication de fa√ßon IRR√âVERSIBLE. Continuer‚ÄØ?")
                    }

                    Spacer()

                    // New section for credential management
                    credentialManagementSection
                }
                .padding()
                .navigationTitle("D√©veloppeur")
                .alert(alertMessage, isPresented: $showingAlert) {
                    Button("OK", role: .cancel) { }
                }
            } else {
                SecureLoginView {
                    isAuthenticated = true
                }
            }
        }
        .onAppear {
            // Initialize newUsername and newPassword with current stored values
            newUsername = storedUsername
            newPassword = storedPassword
        }
    }

    // New computed property for credential management section
    private var credentialManagementSection: some View {
        VStack(spacing: 20) {
            Divider()
            Text("Gestion des Acc√®s D√©veloppeur")
                .font(.headline)

            Toggle(isOn: $isDebugMode) {
                Text("Bypass Login (Mode Debug)")
            }
            .toggleStyle(.switch)
            .padding(.horizontal)

            VStack(alignment: .leading, spacing: 10) {
                Text("Modifier les identifiants")
                    .font(.subheadline)

                TextField("Nouvel identifiant", text: $newUsername)
                    .textFieldStyle(.roundedBorder)

                SecureField("Nouveau mot de passe", text: $newPassword)
                    .textFieldStyle(.roundedBorder)

                HStack {
                    Button("Enregistrer les identifiants") {
                        storedUsername = newUsername
                        storedPassword = newPassword
                        alertMessage = "Identifiants mis √† jour."
                        showingAlert = true
                    }
                    .buttonStyle(.bordered)

                    Button("R√©initialiser les identifiants par d√©faut") {
                        showCredentialResetConfirmation = true
                    }
                    .buttonStyle(.bordered)
                    .tint(.orange)
                }
            }
            .padding()
            .background(Color.gray.opacity(0.1))
            .cornerRadius(8)
        }
        .alert("R√©initialiser les identifiants", isPresented: $showCredentialResetConfirmation) {
            Button("R√©initialiser", role: .destructive) {
                storedUsername = "admin"
                storedPassword = "420STUDIO"
                newUsername = "admin"
                newPassword = "420STUDIO"
                alertMessage = "Identifiants r√©initialis√©s par d√©faut."
                showingAlert = true
            }
            Button("Annuler", role: .cancel) {}
        } message: {
            Text("√ätes-vous s√ªr de vouloir r√©initialiser les identifiants aux valeurs par d√©faut (admin / 420STUDIO) ?")
        }
    }
}

#Preview {
    DeveloperView()
        .environmentObject(DataService.shared)
}
